1.2.1.2.6.2. 提供sql-error-codes.xml自定义配置
在Classpath的根路径下放置名称为sql-error-codes.xml的配置文件，格式需要与默认的org/springframework/jdbc/support/sql-error-codes.xml文件格式相同。

org/springframework/jdbc/support/sql-error-codes.xml的内容摘录如下：

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!--
	- Default SQL error codes for well-known databases.
	- Can be overridden by definitions in a "sql-error-codes.xml" file
	- in the root of the class path.
	-
	- If the Database Product Name contains characters that are invalid
	- to use in the id attribute (like a space) then we need to add a property
	- named "databaseProductName"/"databaseProductNames" that holds this value.
	- If this property is present, then it will be used instead of the id for
	- looking up the error codes based on the current database.
	-->
<beans>
	<bean id="DB2" class="org.springframework.jdbc.support.SQLErrorCodes">
		<property name="databaseProductName">
			<value>DB2*</value>
		</property>
		<property name="badSqlGrammarCodes">
			<value>-204,-206,-301,-408</value>
		</property>
		<property name="dataAccessResourceFailureCodes">
			<value>-904</value>
		</property>
		<property name="dataIntegrityViolationCodes">
			<value>-803</value>
		</property>
		<property name="deadlockLoserCodes">
			<value>-911,-913</value>
		</property>
	</bean>
	
	...
	
</beans>
							
实际上，它就是一个基本的基于DTD的Spring IoC容器配置文件，只不过，配置的class类型则是固定死的。
 

该配置文件中，针对每一个数据库类型都提供了一个org.springframework.jdbc.support.SQLErrorCodes类型的bean定义， 然后根据各个数据库的情况通过相应的setter方法为SQLErrorCodes设置合适的errorCode或者数据库产品别名等。

要扩展异常转译，我们可以根据情况提供Classpath根路径下的sql-error-codes.xml配置文件内容：

如果默认的org/springframework/jdbc/support/sql-error-codes.xml配置文件中，缺少对应你的应用程序所使用的数据库的bean定义配置， 我们直接拷贝现有的某个bean定义到Classpath根路径下的sql-error-codes.xml中，然后修改相应属性值即可：

<bean id="MyDB" class="org.springframework.jdbc.support.SQLErrorCodes">
	<property name="databaseProductName">
		<value>MyDBAlias</value>
	</property>
	<property name="badSqlGrammarCodes">
		<value>000</value>
	</property>
	<property name="dataAccessResourceFailureCodes">
		<value>111</value>
	</property>
	<property name="dataIntegrityViolationCodes">
		<value>222</value>
	</property>
	<property name="deadlockLoserCodes">
		<value>333</value>
	</property>
</bean>
										
注意，我们把数据库名称改为了MyDB之类，相应的错误号也做了改变，当然，这毕竟是例子，所有的东西都是伪造的，如果真要提供这样的配置内容，需要根据具体的数据库信息才可进行。
 

如果需要扩展自定义异常转译属于现有的数据库，那么，我们就从org/springframework/jdbc/support/sql-error-codes.xml中拷贝对应应用程序所用数据库的bean定义内容到Classpath根路径下的sql-error-codes.xml中， 只不过，现在我们要追加新的元素：

<bean id="DB2" class="org.springframework.jdbc.support.SQLErrorCodes">
	<property name="databaseProductName">
		<value>DB2*</value>
	</property>
	<property name="customTranslations">
		<list>
	      <bean class="org.springframework.jdbc.support.CustomSQLErrorCodesTranslation">
	        <property name="errorCodes">
	          	<value>123456</value>
	        </property>
	        <property name="exceptionClass">
	        	<value>...ToySqlExceptionTranslator</value>
	        </property>
	      </bean>
	    </list>
	</property>
</bean>
										
只要通过SQLErrorCodes的“customTranslations”属性传入要扩展的自定义异常转译的必要信息即可。 “customTranslations”为org.springframework.jdbc.support.CustomSQLErrorCodesTranslation类型数组，你可以通过该属性指定多个CustomSQLErrorCodesTranslation实例。 而CustomSQLErrorCodesTranslation可以简单看成是ErrorCode到异常类型的映射包装类，仅此而已。
 

基本上，使用Classpath根路径下的sql-error-codes.xml， 就是简单的配置便可以完成自定义异常转译的扩展工作。
 

1.2.1.3. JdbcTemplate和他的兄弟们
1.2.1.3.1. 使用JdbcTemplate进行数据访问
1.2.1.3.1.1. 初始化JdbcTemplate
1.2.1.3.1.2. 基于JdbcTemplate的数据访问
1.2.1.3.1.3. 递增主键生成策略的抽象
1.2.1.3.1.4. Spring中的Lob类型处理
1.2.1.3.2. NamedParameterJdbcTemplate
1.2.1.3.2.1. NamedParameterJdbcTemplate的功能
1.2.1.3.2.2. NamedParameterJdbcTemplate的实现原理
1.2.1.3.3. SimpleJdbcTemplate
我不得不承认的一点就是，之前对JdbcTemplate的实现原理和细节说了那么多，无非是想让你知道，当需要一个类似的轮子的时候，你该如何去造一个出来。 但是，当有现成的轮子存在的时候，我希望我们去使用这个现成的轮子，而不是耗费人力物力去重造一个，所以，下面主要是告诉你有哪些轮子可用，这些轮子又是如何使用的。

Spring框架最初是只提供了JdbcTemplate这一个实现，但随着Java版本升级，并且考虑到使用中的便利性等问题，spring在新发布的版本中又为JdbcTemplate添加了两位兄弟，一个是org.springframework.jdbc.core.simple.SimpleJdbcTemplate，主要面向Java5提供的一些便利； 另一个是org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate，可以在SQL中使用名称代替原先使用的“?”占位符(Placeholder)。 下面，让我们先从JdbcTemplate开始，亲身领略一下spring所提供的数据访问方式的便利和优雅。

1.2.1.3.1. 使用JdbcTemplate进行数据访问
1.2.1.3.1.1. 初始化JdbcTemplate
1.2.1.3.1.2. 基于JdbcTemplate的数据访问
1.2.1.3.1.3. 递增主键生成策略的抽象
1.2.1.3.1.4. Spring中的Lob类型处理
1.2.1.3.1.1. 初始化JdbcTemplate
JdbcTemplate的初始化很容易，只要通过构造方法传入它所使用的DataSource就可以，如果我们使用Jakarta Commons DBCP，那么，初始化代码看起来是这样的：

BasicDataSource dataSource = new BasicDataSource();
dataSource.setDriverClassName("com.mysql.jdbc.Driver");
dataSource.setUrl("jdbc:mysql://localhost/mysql?useUnicode=true&amp;characterEncoding=utf8&amp;failOverReadOnly=false&amp;roundRobinLoadBalance=true");
dataSource.setUsername("user");
dataSource.setPassword("password");

JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
// do data accesss with jdbcTemplate
							
当然你也可以通过无参数的构造方法来实例化JdbcTemplate，然后通过setDataSource()来设置所使用的DataSource。
 

当然，这仅限于编码的方式来初始化JdbcTemplate，不过，如果我们的应用程序使用Spring的IoC容器的话， 那JdbcTemplate的初始化工作当然就可以转移到容器的配置文件中啦：

<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	<property name="url">
		<value>${jdbc.url}</value>
	</property>
	<property name="driverClassName">
		<value>${jdbc.driver}</value>
	</property>
	<property name="username">
		<value>${jdbc.username}</value>
	</property>
	<property name="password">
		<value>${jdbc.password}</value>
	</property>
	...
</bean>

<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource">
		<ref bean="dataSource"/>
	</property>
</bean>
							
之后，你想把jdbcTemplate注入那个依赖于它的对象都可以。 不过，这里需要注意的不是JdbcTemplate的配置，而是DataSource的配置，我们使用了自定义的销毁对象的回调方法(destroy-method="close")，以确保应用退出后，数据库连接可以关闭。
 

好了，JdbcTemplate初始化完成之后，我们就可以大展拳脚了...

1.2.1.3.1.2. 基于JdbcTemplate的数据访问
该部分仅从整体上对如何使用JdbcTemplate进行基本的数据访问进行介绍，更多JdbcTemplate使用的细节请参照Spring参考文档以及相应的JavaDoc文档。

使用JdbcTemplate查询数据
JdbcTemplate针对数据查询提供了多个重载的模板方法，你可以根据需要选用不同的模板方法。 如果你的查询很简单，仅仅是传入相应SQL或者相关参数，然后取得一个单一的结果，那么你可以选择如下一组便利的模板方法：

int queryForInt(String sql)

int queryForInt(String sql, Object[] args)

long queryForLong(String sql)

long queryForLong(String sql, Object[] args)

Object queryForObject(String sql, Class requiredType)

Object queryForObject(String sql, Object[] args, Class requiredType)

Map queryForMap(String sql)

Map queryForMap(String sql, Object[] args)

比如说，你所查询的结果就包含一列数字型的结果，或者使用了SQL函数，或者其他单列的结果，我们就可以直接通过这组便利的模板方法进行查询：
int age = jdbcTemplate.queryForInt("select age from customer where customerId=?",new Object[]{new Integer(100)});
...
long interval = jdbcTemplate.queryForLong("select count(customerId) from customer");
...
String customerName = jdbcTemplate.queryForString("select username from customer where customerId=110");
...
Map singleCustomer = jdbcTemplate.queryForMap("select * from customer limit 1");
...
								
queryForMap方法与其他方法不同之处在于，它的查询结果以java.util.Map的形式返回，Map的key对应所查询表的列名，Map的value当然就是对应key所在列的值啦。 当然了，你也看到了，这组模板方法主要用于单一结果的查询，使用的时候也请确保你的SQL查询所返回的结果是单一的，否则，JdbcTemplate将抛出org.springframework.dao.IncorrectResultSizeDataAccessException异常。
 

如果查询的结果将返回多行，而你又不在乎他们是否拥有较强的类型约束，那么，以下模板方法可以帮助你：

List queryForList(String sql)

List queryForList(String sql, Object[] args)

queryForList方法根据传入的SQL以及相应的参数执行查询，将查询的结果以java.util.List的形式返回，返回的java.util.List中的每一个元素都是java.util.Map类型，分别对应结果集中的一行，Map的Key为每一列的列名，而Map的值就是当前行列名对应的值。
 

好啦，如果这些还不足以满足你的查询需要，那么我们就更进一步，使用相应的Callback接口对查询结果的返回进行定制吧！

用于查询的回调接口定义主要有以下三种：

org.springframework.jdbc.core.ResultSetExtractor.  基本上属于JdbcTemplate内部使用的Callback接口，相对于下面两个Callback接口来说，ResultSetExtractor拥有更多的控制权，因为使用它，你需要自行处理ResultSet：

public interface ResultSetExtractor 
{
	Object extractData(ResultSet rs) throws SQLException, DataAccessException;
}
												
在直接处理完ResultSet之后，你可以将处理后的结果以任何你想要的形式包装后返回。
 

org.springframework.jdbc.core.RowCallbackHandler.  RowCallbackHandler相对于ResultSetExtractor来说，仅仅关注单行结果的处理，处理后的结果可以根据需要存放到当前RowCallbackHandler对象内或者使用JdbcTemplate的程序上下文中，当然，这个完全是看个人爱好了。 RowCallbackHandler的定义如下：

public interface RowCallbackHandler 
{
	void processRow(ResultSet rs) throws SQLException;
}
												
 

org.springframework.jdbc.core.RowMapper.  ResultSetExtractor的精简版，功能类似于RowCallbackHandler，也只关注处理单行的结果，不过，处理后的结果会由ResultSetExtractor实现类进行组合。 RowMapper的接口定义如下：

public interface RowMapper 
{
	Object mapRow(ResultSet rs, int rowNum) throws SQLException; 
}
												
 

为了说明这三种Callback接口的使用和相互之间的区别，我们暂且设定如下场景：
数据库表customer中存在多行信息，对该表查询后，我们需要将每一行的顾客信息都映射到域对象Customer中，并以java.util.List的形式返回所有的查询结果。

现在，我们分别使用这三种Callback接口对customer表进行查询：
								
List customerList = (List)jdbcTemplate.query("select * from customer", new ResultSetExtractor(){

	public Object extractData(ResultSet rs) throws SQLException,DataAccessException 
	{
		List customers = new ArrayList();
		while(rs.next())
		{
			Customer customer = new Customer();
			customer.setFirstName(rs.getString(1));
			customer.setLastName(rs.getString(2));
			...
			customers.add(customer);
		}
		return customers;
	}});
								
List customerList = jdbcTemplate.query("select * from customer", new RowMapper(){

	public Object mapRow(ResultSet rs, int rowNumber) throws SQLException {
		Customer customer = new Customer();
		customer.setFirstName(rs.getString(1));
		customer.setLastName(rs.getString(2));
		...
		return customer;
	}});
								
final List customerList = new ArrayList();

jdbcTemplate.query("select * from customer", new RowCallbackHandler(){

	public void processRow(ResultSet rs) throws SQLException {
		Customer customer = new Customer();
		customer.setFirstName(rs.getString(1));
		customer.setLastName(rs.getString(2));
		...
		customerList.add(customer);
	}});
								
如果你没有发现最大的差异在哪里，那么容我细表：
使用三种Callback接口作为参数的query方法的返回值不同:

以ResultSetExtractor作为方法参数的query方法返回Object型结果，要使用查询结果，我们需要对其进行强制转型；

以RowMapper接口作为方法参数的query方法直接返回List型的结果；

以RowCallbackHandler作为方法参数的query方法，返回值为void；

 

使用ResultSetExtractor作为Callback接口处理查询结果，我们需要自己声明集合类，自己遍历ResultSet，自己根据每行数据组装Customer对象，自己将组装后的Customer对象添加到集合类中，方法最终只负责将组装完成的集合返回；

使用RowMapper比直接使用ResultSetExtractor要方便的多，只负责处理单行结果就行，现在，我们只需要将单行的结果组装后返回就行，剩下的工作，全部都是JdbcTemplate内部的事情了。 实际上，JdbcTemplae内部会使用一个ResultSetExtractor实现类来做其余的工作，毕竟，该做的工作还得有人做不是？！

JdbcTemplae内部使用的这个ResultSetExtractor实现类为org.springframework.jdbc.core.RowMapperResultSetExtractor， 它内部持有一个RowMapper实例的引用，当处理结果集的时候，会将单行数据的处理委派给其所持有的RowMapper实例，而其余工作它负责：

public Object extractData(ResultSet rs) throws SQLException {
	List results = (this.rowsExpected > 0 ? new ArrayList(this.rowsExpected) : new ArrayList());
	int rowNum = 0;
	while (rs.next()) {
		results.add(this.rowMapper.mapRow(rs, rowNum++));
	}
	return results;
}
											
这下应该清楚为啥RowMapper为啥就处理单行结果就能完成ResultSetExtractor颇费周折的工作了吧？！
 

RowCallbackHandler虽然与RowMapper同是处理单行数据，不过，除了要处理单行结果，它还得负责最终结果的组装和获取工作，在这里我们是使用当前上下文声明的List取得最终查询结果， 不过，我们也可以单独声明一个RowCallbackHandler实现类，在其中声明相应的集合类，这样，我们可以通过该RowCallbackHandler实现类取得最终查询结果：

public class GenericRowCallbackHandler implements RowCallbackHandler {
	private List collections = new ArrayList();
	
	public void processRow(ResultSet rs) throws SQLException {
		Customer customer = new Customer();
		customer.setFirstName(rs.getString(1));
		customer.setLastName(rs.getString(2));
		...
		collections.add(customer);
	}
	
	public List getResults()
	{
		return collections;
	}
}

GenericRowCallbackHandler handler = new GenericRowCallbackHandler();
jdbcTemplate.query("select * from customer",handler());
List customerList = handler.getResults();
											
该使用方式是明了了，不过GenericRowCallbackHandler重用性不佳。
 

RowCallbackHandler因为也是处理单行数据，所以，总得有人来做遍历ResultSet的工作，这个人其实也是一个ResultSetExtractor实现类， 它是JdbcTemplate一个内部静态类，名为RowCallbackHandlerResultSetExtractor，一看它的定义你就知道奥秘之所在了：

private static class RowCallbackHandlerResultSetExtractor implements ResultSetExtractor {

	private final RowCallbackHandler rch;

	public RowCallbackHandlerResultSetExtractor(RowCallbackHandler rch) {
		this.rch = rch;
	}

	public Object extractData(ResultSet rs) throws SQLException {
		while (rs.next()) {
			this.rch.processRow(rs);
		}
		return null;
	}
}
											
 

总的来说，内部工作归根结底是由ResultSetExtractor做了，RowCallbackHandler和RowMapper只是为了帮助我们简化使用上的操作而已。 所以，实际使用中，RowCallbackHandler和RowMapper才是我们最常用的选择。
 

对于使用JdbcTemplate进行查询，基本就这些内容了，当然，如果你非要使用基于StatementCallback之类更底层的execute方法的话，那就是你个人说了算啦。 不过，要想知道JdbcTemplate中有关查询相关模板方法的更多信息，在实际使用中参考JdbcTemplate的javadoc就可以，当然，有IDE就更便捷了。

基于JdbcTemplate的数据更新
相对于查询来说，使用JdbcTemplate进行数据更新就没有那么多说道了。不管你是要对数据库进行数据插入，还是更新甚至删除，你都可以通过JdbcTemplate所提供的一组重载的update()模板方法进行， 这些update方法包括：

int update(String sql)

int update(String sql, Object[] args)

int update(String sql, Object[] args, int[] argTypes)

下面是一些update()方法的使用样例：
// insert 
jdbcTemplate.update("insert into customer(customerName,age,...) values("darren","28",...)");
// update
int affectedRows = jdbcTemplate.update("update customer set customerName='daniel',age=36 where customerId=101");
// or 
int affectedRows = jdbcTemplate.update("update customer set customerName=?,age=? where customerId=?",
										new Object[]{"Daniel",new Integer(36),new Integer(101)});
// delete 
int deletedRowCount = jdbcTemplate.update("delete from customer where customerId between 1 and 100");
								
通常情况下，接受简单的SQL以及相关参数的update方法就能够满足数据更新的需要了，不过，如果你觉得有必要对更新操作有更多的控制权，那么，你可以使用与PreparedStatement相关的Callback接口， 这包括使用PreparedStatementCreator创建PreparedStatement，使用PreparedStatementSetter对相关占位符进行设置等。 同样的对一条记录进行更新，使用Callback接口作为参数的update方法的数据访问代码看起来如下：
// int 	update(String sql, PreparedStatementSetter pss) 								
int affectedRows = jdbcTemplate.update("update customer set customerName=?,age=? where customerId=?", new PreparedStatementSetter(){

			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1,"Daniel");
				ps.setInt(2,36);
				ps.setInt(3,101);
			}});

// int 	update(PreparedStatementCreator psc) 
int affectedRows = jdbcTemplate.update(new PreparedStatementCreator(){

			public PreparedStatement createPreparedStatement(Connection con)
					throws SQLException {
				PreparedStatement ps = con.prepareStatement("update customer set customerName=?,age=? where customerId=?");
				ps.setString(1,"Daniel");
				ps.setInt(2,36);
				ps.setInt(3,101);
				return ps;
			}});
								
使用update方法进行数据更新可以获得最终更新操作所影响的记录数目，而且，如果不单单指定一个SQL作为参数的话，JdbcTemplate内部会构造相应的PreparedStatement进行实际的更新操作。
 

不过，除了使用update方法，你还可以通过“只接受SQL语句作为参数的execute()方法”进行数据更新，该方法没有返回值，所以，更加适合那种不需要返回值的操作，比如删除表，创建表等操作：

jdbcTemplate.execute("create table customer (...)");
// or
jdbcTemplate.execute("drop table customer");
								
至于其他重载的execute()方法，相对来说过于贴近JDBC API了，通常情况下，我们没有必要使用，某些时候为了集成遗留系统中某些基于Jdbc的数据访问代码倒是有可能需要求助于这些execute方法。
 

批量更新数据
对于更新同一数据表的多笔更新操作，我们可以使用Jdbc的批量更新(Batch Update)功能对这些更新操作进行统一提交执行，以避免每一笔更新都单独执行，这样可以大大提高更新的执行效率。

JdbcTemplate提供了两个重载的batchUpdate()方法以支持批量更新操作：

int[] batchUpdate(String[] sql)

int[] batchUpdate(String sql, BatchPreparedStatementSetter pss)

这两个方法在执行批量更新之前会首先检查使用的JDBC驱动程序是否支持批量更新的功能，如果支持，则进行正常的批量更新；如果驱动程序不支持该功能，则会单独执行每一笔更新操作。
 

假设我们要将传入的新追加顾客列表的信息追加到数据库，那么我们就可以使用JdbcTemplate的批量更新支持：

public int[] insertNewCustomers(final List customers)
{
	jdbcTemplate.batchUpdate("insert into customer value(?,?,...)", new BatchPreparedStatementSetter(){
	
		public int getBatchSize() {
			return customers.size();
		}
	
		public void setValues(PreparedStatement ps, int i) throws SQLException {
			Customer customer = (Customer)customers.get(i);
			ps.setString(1,customer.getFirstName());
			ps.setString(2,customer.getLastName());
			...
		}});
}
								
因为我们的更新语句中牵扯参数，所以，我们使用BatchPreparedStatementSetter回调接口来对批量更新中每次更新所需要的参数进行设置。 BatchPreparedStatementSetter有两个方法需要我们实现：
int getBatchSize().  返回批量更新的数目，因为我们要对通过List传入的所有顾客信息进行更新，所以，当前批量更新的数目就是当前List中所有的顾客数目；

void setValues(PreparedStatement ps, int i) .  设置具体的更新数据，其中第二个int型的参数对应的是每笔更新的索引，我们就是根据这个索引从customers列表中取得相应的信息进行设置的。

Spring的批量更新相对于直接使用Jdbc会有微小的性能损失，不过，当某些极端情况下(每个事务100万更新)，使用spring的批量更新可以取得很好的性能。
 

调用存储过程
存储过程属于定义于数据库服务器端的计算单元，对于牵扯多表数据而单单使用SQL无法完成的计算，我们可以通过在数据库服务器端编写并部署存储过程的方式来实现， 相对于将这些计算逻辑转移到客户端进行的好处在于，使用存储过程可以避免像客户端计算那样在网路间来回传送数据导致的性能损失，因为存储过程的所有计算全部在服务器端完成， 所以，如果计算牵扯多个数据表，大量的数据查询和更新，那么，使用存储过程代替客户端计算是比较合适的做法。

存储过程(Stored Procedure)不属于核心SQL标准的一部分，所以，并非所有关系数据库都提供对存储过程的支持，但存储过程在许多企业应用中具有重要地位，所以，Jdbc标准也通过提供CallableStatement支持对现有存储过程的调用。

假设我们有以下的存储过程定义(MySQL的定义语法):

CREATE PROCEDURE CountTable(IN tableName varchar(1000),OUT sqlStr varchar(1000) , INOUT v INT)
BEGIN
    set @flag = v;
    set @sql = CONCAT('select count(*) into @res from ' , tableName , ' where ACTIVE_FLAG=?');
    PREPARE stmt FROM @sql;
    EXECUTE stmt using @flag;
    DEALLOCATE PREPARE stmt;
    set v = @res;
    set sqlStr = @sql;
END
								
该存储过程定义了三个Parameter:
tableName为IN参数，字符串类型；

sqlStr为OUT参数，也是字符串类型；

v为INOUT参数，INT类型；

对于存储过程的调用基本上就是设置相应的IN参数，声明OUT参数，当CallableStatement执行后，再根据OUT参数取得执行结果这么一个流程， 下面是没有使用JdbcTemplate直接使用JDBC调用存储过程的代码示例：
Connection conn = null; 
CallableStatement stat = null; 
try{ 
  conn = dataSource.getConnection();
  stat = conn.prepareCall("call CountTable(?,?,?)");
  
  stat.setString(1, "TableName");
  stat.setInt(3, 1);
 
  stat.registerOutParameter(2, Types.VARCHAR);
  stat.registerOutParameter(3, Types.INTEGER);
  
  stat.execute();
  
  String sql = stat.getString(2);
  int count = stat.getInt(3);
  
  System.out.println("SQL:"+sql);
  System.out.println("Record count:"+count);
  
 }catch(Exception dx){ 
  dx.printStackTrace();
 }finally{ 
   if(null!=stat) try{stat.close();}catch(Exception dx){}
   if(null!=conn) try{conn.close();}catch(Exception dx){}
} 
								
 

JdbcTemplate同样对存储过程的调用进行了模板化处理，对于同一存储过程，我们来看使用JdbcTemplate后是是怎么一个样子：

Object result = jdbcTemplate.execute("call CountTable(?,?,?)", new CallableStatementCallback(){

	public Object doInCallableStatement(CallableStatement cs)
			throws SQLException, DataAccessException {
		// declare and set IN/OUT paramters
		cs.setString(1, "tableName");
		cs.setInt(3, 1);
		cs.registerOutParameter(2, Types.VARCHAR);
		cs.registerOutParameter(3, Types.INTEGER);
		
		// execute Call
		cs.execute();
		
		// extract result and return
		Map result = new HashMap();
		result.put("SQL", cs.getString(2));
		result.put("COUNT", cs.getInt(3));
		return result;
	}});
								
我们直接使用CallableStatementCallback回调接口所暴露的CallableStatement对象句柄进行调用操作，而无需关心CallableStatement以及Connection等资源的管理问题。
 

或者你可以把CallableStatementCallback的部分职能划分出去，一部分由CallableStatementCreator这个Callback接口分担：

Object result = jdbcTemplate.execute(new CallableStatementCreator(){

			public CallableStatement createCallableStatement(Connection con)
					throws SQLException {
					CallableStatement cs = con.prepareCall("call CountTable(?,?,?)");
					cs.setString(1, "tableName");
					cs.setInt(3, 1);
					cs.registerOutParameter(2, Types.VARCHAR);
					cs.registerOutParameter(3, Types.INTEGER);
					return cs;
			}}, new CallableStatementCallback(){

				public Object doInCallableStatement(CallableStatement cs)
						throws SQLException, DataAccessException {
					cs.execute();
					// extract result and return
					Map result = new HashMap();
					result.put("SQL", cs.getString(2));
					result.put("COUNT", cs.getInt(3));
					return result;
				}});
								
 

除了以上两种调用存储过程的方法，你还可以JdbcTemplate提供的另一个调用存储过程的模板方法：

Map 	call(CallableStatementCreator csc, List declaredParameters) 
该模板方法主要好处是可以通过List指定存储过程的参数列表，之后，JdbcTemplate会根据指定的参数列表所提供的参数信息为你组装调用结果，并以Map形式返回。 declaredParameters参数列表中的元素需要为org.springframework.jdbc.core.SqlParameter类型或者相关子类，声明顺序和参数类型要与实际存储过程定义的参数顺序和类型相同。
 

下面是使用call方法调用我们的存储过程的实例代码：

List<SqlParameter> parameters = new ArrayList<SqlParameter>();
parameters.add(new SqlParameter(Types.VARCHAR));
parameters.add(new SqlOutParameter("SQL",Types.VARCHAR));
parameters.add(new SqlInOutParameter("COUNT",Types.INTEGER));

Map result = jdbcTemplate.call(new CallableStatementCreator(){

	public CallableStatement createCallableStatement(Connection con)
			throws SQLException {
		CallableStatement cs = con.prepareCall("call CountTable(?,?,?)");
		cs.setString(1, "tableName");
		cs.setInt(3, 1);
		cs.registerOutParameter(2, Types.VARCHAR);
		cs.registerOutParameter(3, Types.INTEGER);
		return cs;
	}}, parameters); 

System.out.println(result.get("SQL"));
System.out.println(result.get("COUNT"));
								
 

使用JdbcTemplate的存储过程调用方法，我们不用关注资源释放之类的问题，仅关注相关参数和结果的处理即可。 当然，虽然可以省却资源管理的烦恼，但使用相关回调接口使得使用JdbcTemplate进行存储过程调用并不是那么令人赏心悦目，如果你不满意此种繁琐，那么没关系，稍后为您介绍Spring中另一种存储过程调用方式。

 