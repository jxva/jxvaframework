package demo.dao.derby;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

import com.jxva.dao.DAO;
import com.jxva.dao.DAOFactory;
import com.jxva.dao.type.SqlType;

/**
	create table tbl_derby(
		a1 INTEGER generated by default as identity, 
		a2 bigint,
		a3 blob,
		a4 char,
		a5 char(32) for bit data,
		a6 text clob,
		a7 date,
		a8 decimal,
		a9 double,
		a10 double precision,	
		a11 float,
		a12 integer,
		a13 long varchar,
		a14 long varchar for bit data,
		a15 numeric,
		a16 real,
		a17 smallint,
		a18 time,
		a19 timestamp,
		a20 varchar(32),
		a21 varchar(255) for bit data
	);
	
	Name Type    JavaType                TypeName                      ClassName                               
	A1   4       java.lang.Integer       INTEGER                       java.lang.Integer                       
	A2   -5      java.lang.Long          BIGINT                        java.lang.Long                          
	A3   2004    java.sql.Blob           BLOB                          java.sql.Blob                           
	A4   1       java.lang.Character     CHAR                          java.lang.String                        
	A5   -2      java.io.InputStream     CHAR FOR BIT DATA             byte[]                                  
	A6   2005    java.sql.Clob           CLOB                          java.sql.Clob                           
	A7   91      java.sql.Date           DATE                          java.sql.Date                           
	A8   3       java.math.BigDecimal    DECIMAL                       java.math.BigDecimal                    
	A9   8       java.lang.Double        DOUBLE                        java.lang.Double                        
	A10  8       java.lang.Double        DOUBLE                        java.lang.Double                        
	A11  8       java.lang.Double        DOUBLE                        java.lang.Double                        
	A12  4       java.lang.Integer       INTEGER                       java.lang.Integer                       
	A13  -1      java.lang.String        LONG VARCHAR                  java.lang.String                        
	A14  -4      java.io.InputStream     LONG VARCHAR FOR BIT DATA     byte[]                                  
	A15  3       java.math.BigDecimal    DECIMAL                       java.math.BigDecimal                    
	A16  7       java.lang.Float         REAL                          java.lang.Float                         
	A17  5       java.lang.Short         SMALLINT                      java.lang.Integer                       
	A18  92      java.sql.Time           TIME                          java.sql.Time                           
	A19  93      java.sql.Timestamp      TIMESTAMP                     java.sql.Timestamp                      
	A20  12      java.lang.String        VARCHAR                       java.lang.String                        
	A21  -3      java.io.InputStream     VARCHAR FOR BIT DATA          byte[]                                  

 * 
 *
 */

public class DerbyDataType {

	private static final DAOFactory factory=DAOFactory.getInstance("test.dao.derby.jxva");
	private static DAO dao;
	public static void main(String[] args) throws Exception {
		dao=factory.createDAO();
		Connection conn=dao.getJdbcTemplate().getConnection();
		Statement stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
		stmt.setMaxRows(8);
		ResultSet rs=stmt.executeQuery("select * from tbl_derby");

		ResultSetMetaData rsmd=rs.getMetaData();
		int colCount=rsmd.getColumnCount();
		//rs.absolute(colCount);
		while(rs.next()){
			for(int i=1;i<=colCount;i++){
				System.out.print(rs.getObject(i)+" ");
			}
			System.out.println();
		}

		System.out.printf("%-5s%-8s%-24s%-30s%-40s\n","Name","Type","JavaType","TypeName","ClassName");
		for(int i=1;i<=colCount;i++){	
			System.out.printf("%-5s",rsmd.getColumnName(i));
			//System.out.print(rsmd.isNullable(i)+"\t");
			//System.out.print(" "+rsmd.getColumnDisplaySize(i));
			System.out.printf("%-8s",rsmd.getColumnType(i));
			System.out.printf("%-24s",SqlType.get(rsmd.getColumnType(i)).getName());
			System.out.printf("%-30s",rsmd.getColumnTypeName(i));
			System.out.printf("%-40s\n",rsmd.getColumnClassName(i));
		}
		dao.close();
	}
}
