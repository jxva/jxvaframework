
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Mon Dec 17 17:34:29 PST 2001
//----------------------------------------------------

package sql4j.parser;

import sql4j.parser.*;
import java_cup.runtime.*;
import java.util.*;
import java.lang.*;
import java.io.*;

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SQLParser$actions {
  private final SQLParser parser;

  /** Constructor */
  CUP$SQLParser$actions(SQLParser parser) {
	this.parser = parser;
  }    

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SQLParser$do_action(
	int                        CUP$SQLParser$act_num,
	java_cup.runtime.lr_parser CUP$SQLParser$parser,
	java.util.Stack            CUP$SQLParser$stack,
	int                        CUP$SQLParser$top)
	throws java.lang.Exception
	{
	  /* Symbol object for return from actions */
	  java_cup.runtime.Symbol CUP$SQLParser$result;

	  /* select the action based on the action number */
	  switch (CUP$SQLParser$act_num)
		{
		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 169: // argument ::= QUOTE QUOTE 
			{
			  Argument RESULT = null;
		 
				
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(61/*argument*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 168: // argument ::= QUOTE error QUOTE 
			{
			  Argument RESULT = null;
		 
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(61/*argument*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 167: // argument ::= function_call_stmt 
			{
			  Argument RESULT = null;
		 
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(61/*argument*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 166: // argument ::= literal 
			{
			  Argument RESULT = null;
		 
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(61/*argument*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 165: // argument ::= name_varref 
			{
			  Argument RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new Argument(e);
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(61/*argument*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 164: // argument_list ::= argument_list COMMA argument 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Argument e2 = (Argument)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 e1.add(e2); RESULT=e1;
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(62/*argument_list*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 163: // argument_list ::= argument 
			{
			  Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Argument e = (Argument)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 Vector v=new Vector();
					 v.add(e); RESULT=v;
				  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(62/*argument_list*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 162: // opt_asc_desc ::= DESC 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(40/*opt_asc_desc*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 161: // opt_asc_desc ::= ASC 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(40/*opt_asc_desc*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 160: // opt_asc_desc ::= 
			{
			  String RESULT = null;
		 RESULT = null; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(40/*opt_asc_desc*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 159: // ordering_spec ::= column_ref opt_asc_desc 
			{
			  OrderSpec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Column e1 = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new OrderSpec(e1,e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(39/*ordering_spec*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 158: // ordering_spec ::= NUMBER opt_asc_desc 
			{
			  OrderSpec RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(39/*ordering_spec*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 157: // ordering_spec_commalist ::= ordering_spec_commalist COMMA ordering_spec 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		OrderSpec e2 = (OrderSpec)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 e1.add(e2);
		RESULT=e1;
		
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(38/*ordering_spec_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 156: // ordering_spec_commalist ::= ordering_spec 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		OrderSpec e1 = (OrderSpec)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Vector();RESULT.add(e1); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(38/*ordering_spec_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 155: // order_by_clause ::= ORDER BY ordering_spec_commalist 
			{
			  Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(37/*order_by_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 154: // opt_having_clause ::= HAVING where_condition 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(46/*opt_having_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 153: // opt_having_clause ::= 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(46/*opt_having_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 152: // opt_for_update_clause ::= FOR UPDATE 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(41/*opt_for_update_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 151: // opt_for_update_clause ::= 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(41/*opt_for_update_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 150: // opt_group_by_clause ::= GROUP BY column_ref_commalist 
			{
			  Columns RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Columns e = (Columns)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(36/*opt_group_by_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 149: // opt_group_by_clause ::= 
			{
			  Columns RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(36/*opt_group_by_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 148: // literal ::= NULLX 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
				//|       VARREF:e  {: RESULT=e; 
				
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(59/*literal*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 147: // literal ::= NUMBER 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(59/*literal*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 146: // literal ::= STRING 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(59/*literal*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 145: // function_ref ::= NAME LPAREN argument_list RPAREN 
			{
			  FunctionRef RESULT = null;
		  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 144: // function_ref ::= TIMESTAMP LPAREN scalar_exp RPAREN 
			{
			  FunctionRef RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new FunctionRef(op, e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 143: // function_ref ::= AMMSC LPAREN scalar_exp RPAREN 
			{
			  FunctionRef RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new FunctionRef(op, e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 142: // function_ref ::= AMMSC LPAREN ALL scalar_exp RPAREN 
			{
			  FunctionRef RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new FunctionRef(op, e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 141: // function_ref ::= AMMSC LPAREN DISTINCT scalar_exp RPAREN 
			{
			  FunctionRef RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new FunctionRef(op, e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 140: // function_ref ::= AMMSC LPAREN TIMES RPAREN 
			{
			  FunctionRef RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		 RESULT=new FunctionRef(op); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(58/*function_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 139: // parameter_ref ::= COLON NAME INDICATOR COLON NAME 
			{
			  ParameterRef RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(57/*parameter_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 138: // parameter_ref ::= COLON NAME COLON NAME 
			{
			  ParameterRef RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(57/*parameter_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 137: // parameter_ref ::= COLON NAME 
			{
			  ParameterRef RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(57/*parameter_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 136: // atom ::= USER 
			{
			  Atom RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(56/*atom*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 135: // atom ::= literal 
			{
			  Atom RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Atom(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(56/*atom*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 134: // atom ::= parameter_ref 
			{
			  Atom RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ParameterRef e = (ParameterRef)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Atom(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(56/*atom*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 133: // scalar_exp_commalist ::= scalar_exp_commalist COMMA scalar_exp 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp e2 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		
			e1.add(e2); RESULT=e1;
		  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(55/*scalar_exp_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 132: // scalar_exp_commalist ::= scalar_exp 
			{
			  Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		  Vector v=new Vector(); v.add(e); RESULT=v; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(55/*scalar_exp_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 131: // as_clause ::= AS QUOTE NAME QUOTE 
			{
			  String RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(25/*as_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 130: // as_clause ::= AS NAME 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(25/*as_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 129: // scalar_exp ::= CURRENT DATE 
			{
			  ScalarExp RESULT = null;
		 RESULT= new ScalarExp(new Atom("CURRENT DATE")); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 128: // scalar_exp ::= CURRENT TIMESTAMP 
			{
			  ScalarExp RESULT = null;
		 RESULT= new ScalarExp(new Atom("CURRENT TIMESTAMP")); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 127: // scalar_exp ::= LPAREN scalar_exp RPAREN 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT= e;  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 126: // scalar_exp ::= scalar_exp NAME 
			{
			  ScalarExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= e1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 125: // scalar_exp ::= SQUOTE scalar_exp SQUOTE 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT= e;  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 124: // scalar_exp ::= LPAREN scalar_exp RPAREN 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT= e;  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 123: // scalar_exp ::= LBRACE NAME function_call_stmt RBRACE 
			{
			  ScalarExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 // used in net.data macro 
				
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 122: // scalar_exp ::= function_ref 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		FunctionRef e = (FunctionRef)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new ScalarExp(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 121: // scalar_exp ::= column_ref 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Column e = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new ScalarExp(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 120: // scalar_exp ::= atom 
			{
			  ScalarExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Atom e = (Atom)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new ScalarExp(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 119: // scalar_exp ::= scalar_exp TIMES scalar_exp 
			{
			  ScalarExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp e3 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new ScalarExp(e1, e2, e3); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 118: // scalar_exp ::= scalar_exp ARITHMETIC scalar_exp 
			{
			  ScalarExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp e3 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new ScalarExp(e1, e2, e3); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 117: // scalar_exp ::= scalar_exp as_clause 
			{
			  ScalarExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT= e1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(54/*scalar_exp*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 116: // set_expr ::= column_ref COMPARISON scalar_exp 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Column s1 = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp s2 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		
						RESULT=s1;                     
					//|VARREF   
						
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(19/*set_expr*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 115: // set_clause ::= set_clause COMMA set_expr 
			{
			  Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e1;
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(20/*set_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 114: // set_clause ::= SET set_expr 
			{
			  Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(20/*set_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 113: // opt_all_distinct ::= DISTINCT 
			{
			  AllDistinctPredicate RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new AllDistinctPredicate("DISTINCT"); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(35/*opt_all_distinct*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 112: // opt_all_distinct ::= ALL 
			{
			  AllDistinctPredicate RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT= new AllDistinctPredicate("ALL"); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(35/*opt_all_distinct*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 111: // opt_all_distinct ::= 
			{
			  AllDistinctPredicate RESULT = null;
		RESULT=null;
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(35/*opt_all_distinct*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 110: // existence_test ::= EXISTS sub_query 
			{
			  ExistenceTest RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=new ExistenceTest(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(52/*existence_test*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 109: // any_all_some ::= SOME 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(51/*any_all_some*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 108: // any_all_some ::= ALL 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(51/*any_all_some*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 107: // any_all_some ::= ANY 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(51/*any_all_some*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 106: // all_or_any_predicate ::= scalar_exp COMPARISON any_all_some sub_query 
			{
			  AllOrAnyPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e4 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=new AllOrAnyPredicate(e1,e2,e3,e4);
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(50/*all_or_any_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 105: // atom_commalist ::= atom_commalist COMMA atom 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Vector e1 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Atom e2 = (Atom)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 e1.add(e2);
		   RESULT=e1;
		
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(49/*atom_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 104: // atom_commalist ::= atom 
			{
			  Vector RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Atom e1 = (Atom)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Vector();RESULT.add(e1); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(49/*atom_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 103: // in_predicate ::= scalar_exp IN LPAREN atom_commalist RPAREN 
			{
			  InPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new InPredicate(e1, "IN", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(48/*in_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 102: // in_predicate ::= scalar_exp NOT IN LPAREN atom_commalist RPAREN 
			{
			  InPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new InPredicate(e1, "NOT IN", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(48/*in_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 101: // in_predicate ::= scalar_exp IN sub_query 
			{
			  InPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e2 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new InPredicate(e1, "IN", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(48/*in_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 100: // in_predicate ::= scalar_exp NOT IN sub_query 
			{
			  InPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e2 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new InPredicate(e1, "NOT IN", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(48/*in_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 99: // test_for_null ::= column_ref IS NULLX 
			{
			  TestForNull RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Column c = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		 RESULT=new TestForNull("IS", c); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(47/*test_for_null*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 98: // test_for_null ::= column_ref IS NOT NULLX 
			{
			  TestForNull RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		Column c = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		 RESULT=new TestForNull("IS NOT", c); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(47/*test_for_null*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 97: // opt_escape ::= ESCAPE atom 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(45/*opt_escape*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 96: // opt_escape ::= 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(45/*opt_escape*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 95: // like_predicate ::= scalar_exp LIKE name_varref opt_escape 
			{
			  LikePredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new LikePredicate(e1, "LIKE", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(44/*like_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 94: // like_predicate ::= scalar_exp NOT LIKE name_varref opt_escape 
			{
			  LikePredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT=new LikePredicate(e1, "NOT LIKE", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(44/*like_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 93: // like_predicate ::= scalar_exp LIKE STRING opt_escape 
			{
			  LikePredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new LikePredicate(e1, "LIKE", e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(44/*like_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 92: // like_predicate ::= scalar_exp NOT LIKE STRING opt_escape 
			{
			  LikePredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new LikePredicate(e1, "NOT LIKE", e2);
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(44/*like_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 91: // between_predicate ::= scalar_exp BETWEEN scalar_exp AND scalar_exp 
			{
			  BetweenPredicate RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(43/*between_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 90: // between_predicate ::= scalar_exp NOT BETWEEN scalar_exp AND scalar_exp 
			{
			  BetweenPredicate RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(43/*between_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 89: // comparison_predicate ::= scalar_exp COMPARISON sub_query 
			{
			  ComparisonPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e3 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new ComparisonPredicate(e1,e2,e3); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(42/*comparison_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 88: // comparison_predicate ::= scalar_exp COMPARISON scalar_exp 
			{
			  ComparisonPredicate RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ScalarExp e1 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ScalarExp e3 = (ScalarExp)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new ComparisonPredicate(e1,e2,e3); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(42/*comparison_predicate*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 87: // atomic_condition ::= existence_test 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ExistenceTest e = (ExistenceTest)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 86: // atomic_condition ::= all_or_any_predicate 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		AllOrAnyPredicate e = (AllOrAnyPredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 85: // atomic_condition ::= in_predicate 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		InPredicate e = (InPredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 84: // atomic_condition ::= test_for_null 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		TestForNull e = (TestForNull)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 83: // atomic_condition ::= like_predicate 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		LikePredicate e = (LikePredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 82: // atomic_condition ::= between_predicate 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		BetweenPredicate e = (BetweenPredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 81: // atomic_condition ::= comparison_predicate 
			{
			  AtomicWhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ComparisonPredicate e = (ComparisonPredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		  RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(18/*atomic_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 80: // where_condition ::= error OR where_condition 
			{
			  WhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 79: // where_condition ::= error AND where_condition 
			{
			  WhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 78: // where_condition ::= NOT where_condition 
			{
			  WhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT = new CompoundWhereCondition("NOT", e);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 77: // where_condition ::= where_condition OR where_condition 
			{
			  WhereCondition RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		WhereCondition e1 = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e2 = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT = new CompoundWhereCondition("OR", e1, e2);
					  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 76: // where_condition ::= where_condition AND where_condition 
			{
			  WhereCondition RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		WhereCondition e1 = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e2 = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT=new CompoundWhereCondition("AND", e1,e2);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 75: // where_condition ::= LPAREN where_condition RPAREN 
			{
			  WhereCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		WhereCondition e = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		RESULT=e; 
				//|where_condition:e1 VARREF where_condition:e2
				
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 74: // where_condition ::= atomic_condition 
			{
			  WhereCondition RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		AtomicWhereCondition c = (AtomicWhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = c; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(17/*where_condition*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 73: // where_clause ::= WHERE where_condition 
			{
			  WhereClause RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		WhereCondition e = (WhereCondition)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new WhereClause(e);
					  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(15/*where_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 72: // where_clause ::= 
			{
			  WhereClause RESULT = null;
		RESULT=null;                  
						//|VARREF
					  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(15/*where_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 71: // column_def ::= NAME INTEGER 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(33/*column_def*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 70: // column_def ::= NAME NUMERIC LPAREN NUMBER RPAREN 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		                      
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(33/*column_def*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 69: // column_def ::= NAME CHARACTER LPAREN NUMBER RPAREN 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(33/*column_def*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 68: // column_def_commalist ::= column_def_commalist COMMA column_def 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(34/*column_def_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 67: // column_def_commalist ::= column_def 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(34/*column_def_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 66: // name_varref ::= QUESTION 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(64/*name_varref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 65: // name_varref ::= VARREF 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(64/*name_varref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 64: // name_varref ::= NAME 
			{
			  String RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(64/*name_varref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 63: // table ::= table NAME 
			{
			  Table RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Table e1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e1; e1.setAlias(e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(31/*table*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 62: // table ::= NAME PERIOD NAME 
			{
			  Table RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=new Table(e1,e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(31/*table*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 61: // table ::= name_varref 
			{
			  Table RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT =new Table(s1);
				//name_varref name_varref
				
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(31/*table*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 60: // column_name ::= name_varref 
			{
			  ColumnName RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new ColumnName("", s); 
		   // name_varref:e name_varref 
		  // RESULT=new ColumnName("", e); 
		  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(24/*column_name*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 59: // column_ref ::= NAME PERIOD NAME PERIOD NAME 
			{
			  Column RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new Column(s1,s2,s3); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(23/*column_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 58: // column_ref ::= NAME PERIOD NAME 
			{
			  Column RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Column(e1,e2); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(23/*column_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 57: // column_ref ::= column_name 
			{
			  Column RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ColumnName s1 = (ColumnName)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new Column(s1); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(23/*column_ref*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 56: // table_commalist ::= table_commalist COMMA table 
			{
			  Tables RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Tables s1 = (Tables)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Table s2 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT = s1.add(s2);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(32/*table_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 55: // table_commalist ::= table 
			{
			  Tables RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = new Tables(s1);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(32/*table_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 54: // table_commalist ::= LPAREN table_commalist RPAREN 
			{
			  Tables RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Tables e = (Tables)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(32/*table_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 53: // column_ref_commalist ::= column_ref_commalist COMMA column_ref 
			{
			  Columns RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Columns s1 = (Columns)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Column s2 = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT = s1.add(s2);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(21/*column_ref_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 52: // column_ref_commalist ::= column_ref 
			{
			  Columns RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Column s1 = (Column)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
						RESULT = new Columns(s1);
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(21/*column_ref_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 51: // value_commalist ::= value_commalist COMMA value 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(30/*value_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 50: // value_commalist ::= value 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		                       
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(30/*value_commalist*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 49: // value ::= NULLX 
			{
			  String RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(29/*value*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 48: // value ::= name_varref 
			{
			  String RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(29/*value*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 47: // value ::= STRING 
			{
			  String RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = s1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(29/*value*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 46: // value ::= NUMBER 
			{
			  String RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT = s1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(29/*value*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 45: // values_clause ::= VALUES LPAREN value_commalist RPAREN 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(28/*values_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 44: // column_clause ::= COLUMN 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(27/*column_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 43: // column_clause ::= 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(27/*column_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 42: // alter_variants ::= RENAME column_clause column_name TO column_name 
			{
			  Object RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		ColumnName c1 = (ColumnName)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ColumnName c2 = (ColumnName)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(22/*alter_variants*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 41: // alter_variants ::= DROP column_clause column_ref_commalist 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(22/*alter_variants*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 40: // alter_variants ::= ADD LPAREN column_def_commalist RPAREN 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(22/*alter_variants*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 39: // alter_table_statement ::= ALTER TABLE table alter_variants 
			{
			  AlterTableStatement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(12/*alter_table_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 38: // create_table_statement ::= CREATE TABLE table LPAREN column_def_commalist RPAREN 
			{
			  CreateTableStatement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(11/*create_table_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 37: // drop_table_statement ::= DROP TABLE table 
			{
			  DropTableStatement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(14/*drop_table_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 36: // insert_statement ::= INSERT INTO table LPAREN column_ref_commalist RPAREN values_clause NT$1 INSERT INTO error 
			{
			  InsertStatement RESULT = null;
			  // propagate RESULT from NT$1
			  if ( ((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value != null )
				RESULT = (InsertStatement) ((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(3/*insert_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 35: // NT$1 ::= 
			{
			  Object RESULT = null;
 
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(67/*NT$1*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 34: // view_def ::= CREATE VIEW table AS select_statement 
			{
			  ViewDef RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Table e1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e2 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new ViewDef(e1, e2);
	
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(2/*view_def*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 33: // select_statement ::= compound_query order_by_clause 
			{
			  SelectStatement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		SelectStatement e1 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Vector e2 = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 ((SelectStatement) e1).addOrderBy(e2); 
					   RESULT = e1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(7/*select_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 32: // select_statement ::= compound_query 
			{
			  SelectStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(7/*select_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 31: // select_statement ::= with_clause compound_query 
			{
			  SelectStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(7/*select_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 30: // with_clause ::= WITH error 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(26/*with_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 29: // with_clause ::= WITH column_ref AS 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(26/*with_clause*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 28: // selection ::= TIMES 
			{
			  Selection RESULT = null;
		 RESULT=new Selection("*");  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(53/*selection*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 27: // selection ::= scalar_exp_commalist 
			{
			  Selection RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=new Selection(e); 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(53/*selection*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 26: // compound_query ::= sub_query 
			{
			  SelectStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(10/*compound_query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 25: // compound_query ::= compound_query JOIN compound_query 
			{
			  SelectStatement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		SelectStatement e1 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		 RESULT=e1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(10/*compound_query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 24: // compound_query ::= compound_query UNION compound_query 
			{
			  SelectStatement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		SelectStatement e1 = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		 RESULT=e1; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(10/*compound_query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 23: // compound_query ::= query 
			{
			  SelectStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=e;  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(10/*compound_query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 22: // sub_query ::= LPAREN query RPAREN 
			{
			  SelectStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		RESULT=e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(9/*sub_query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 21: // query ::= SELECT error 
			{
			  SelectStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(8/*query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 20: // query ::= SELECT opt_all_distinct selection FROM table_commalist where_clause opt_group_by_clause opt_having_clause opt_for_update_clause 
			{
			  SelectStatement RESULT = null;
		int e4left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-7)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-7)).right;
		AllDistinctPredicate e4 = (AllDistinctPredicate)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-6)).right;
		Selection e1 = (Selection)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		Tables e2 = (Tables)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		WhereClause e3 = (WhereClause)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Columns e5 = (Columns)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		 RESULT = new SelectStatement(e1, e2, e3, e4, e5);
		  
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(8/*query*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 19: // update_statement ::= UPDATE error 
			{
			  UpdateStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(13/*update_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 18: // update_statement ::= UPDATE table set_clause where_clause 
			{
			  UpdateStatement RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(13/*update_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 17: // delete_statement ::= DELETE FROM error 
			{
			  DeleteStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(6/*delete_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 16: // delete_statement ::= DELETE FROM table NT$0 where_clause 
			{
			  DeleteStatement RESULT = null;
			  // propagate RESULT from NT$0
			  if ( ((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value != null )
				RESULT = (DeleteStatement) ((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		
						
					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(6/*delete_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 15: // NT$0 ::= 
			{
			  Object RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		Table s1 = (Table)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;

					 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(66/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 14: // rollback_statement ::= ROLLBACK WORK 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(5/*rollback_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 13: // rollback_statement ::= ROLLBACK 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(5/*rollback_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 12: // commit_statement ::= COMMIT WORK 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(4/*commit_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 11: // commit_statement ::= COMMIT 
			{
			  Object RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(4/*commit_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 10: // sql_statement ::= rollback_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 9: // sql_statement ::= commit_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 8: // sql_statement ::= delete_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 7: // sql_statement ::= update_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 6: // sql_statement ::= drop_table_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 5: // sql_statement ::= alter_table_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 4: // sql_statement ::= create_table_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 3: // sql_statement ::= insert_statement 
			{
			  SQLStatement RESULT = null;

			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 2: // sql_statement ::= view_def 
			{
			  SQLStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		ViewDef e = (ViewDef)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		 RESULT=(SQLStatement)e; 
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 1: // $START ::= sql_statement EOF 
			{
			  Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		SQLStatement start_val = (SQLStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		RESULT = start_val;
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  /* ACCEPT */
		  CUP$SQLParser$parser.done_parsing();
		  return CUP$SQLParser$result;

		  /*. . . . . . . . . . . . . . . . . . . .*/
		  case 0: // sql_statement ::= select_statement 
			{
			  SQLStatement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right;
		SelectStatement e = (SelectStatement)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).value;
		RESULT=(SQLStatement)e;
			  CUP$SQLParser$result = new java_cup.runtime.Symbol(1/*sql_statement*/, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-0)).right, RESULT);
			}
		  return CUP$SQLParser$result;

		  /* . . . . . .*/
		  default:
			throw new Exception(
			   "Invalid action number found in internal parse table");

		}
	}
}